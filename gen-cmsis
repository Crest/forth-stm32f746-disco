#!/usr/bin/python3
import math
import os

try:
    from cmsis_svd.parser import SVDParser
except ModuleNotFoundError:
    print('cmsis-svd not installed: installing using pip...')
    os.system('python3 -m pip install cmsis-svd')
from cmsis_svd.parser import SVDParser


MODEL = 'STM32F7x6'
SVD_FILE = f'{MODEL}.svd'
MEMMAP_FILE = 'memmap.fs'
BITFIELDS_FILE = 'bitfields.fs'
MMF_COMMENT_COLUMN = 40
BFF_COMMENT_COLUMN = 72
WANTED_REGISTERS_FILE = 'registers.txt'

def try_unlink(f):
    try:
        os.unlink(f)
    except FileNotFoundError:
        pass


def wanted():
    with open(WANTED_REGISTERS_FILE, 'r') as f:
        regs = [line.strip() for line in f.readlines()]
        vals = [reg.split('_') for reg in regs]
        periphs = [val[0] for val in vals]
        periphs = list(set(periphs))
        return periphs, regs


def pad_tabs(s, n):
    l = len(s)
    ts = math.ceil((n - l) / 8)
    ts = '\t' * max(1, ts)  # always at least one
    return f'{s}{ts}'


def formatted_access(access):
    return f'({access}) ' if access else ''


def replace_multi_spaces_w_one(s):
    return ' '.join(s.split())


BITFIELDS = {}


def print_periph(p, mmf, bff, wanted_regs):
    s = f'${p.base_address:x} constant {p.name}'
    s = pad_tabs(s, MMF_COMMENT_COLUMN)
    print(f'{s}\\ {p.description}', file=mmf)
    for r in p.registers:
        reg_name = f'{p.name}_{r.name}'
        if reg_name not in wanted_regs:
            continue
        s = f'{p.name} ${r.address_offset:x} + constant {reg_name}'
        s = pad_tabs(s, MMF_COMMENT_COLUMN)
        print(f'{s}\\ {r.access} {r.description}', file=mmf)
        print(f'\ {reg_name} {formatted_access(r.access)}Reset: 0x{r.reset_value:08x}', file=bff)
        for f in r.fields:
            #s = f': {reg_name}_{f.name} ( -- addr offset width ) {reg_name} #{f.bit_offset} #{f.bit_width} ;'
            #s = pad_tabs(s, BFF_COMMENT_COLUMN)
            #print(f'{s}\\ {formatted_access(f.access)}{replace_multi_spaces_w_one(r.description)}', file=bff)

            name = f.name
            bf = BITFIELDS.get(name, None)
            if bf:
                if bf.bit_offset == f.bit_offset and bf.bit_width == f.bit_width:
                    continue
                print(f'WARNING: {reg_name}: {f.name} already exists with different offset and width, appending reg name')
                name = f'{r.name}_{name}'
            else:
                BITFIELDS[name] = f
            s = f': {name} ( -- offset width ) #{f.bit_offset} #{f.bit_width} ;'
            s = pad_tabs(s, BFF_COMMENT_COLUMN)
            print(f'{s}\\ {formatted_access(f.access)}{replace_multi_spaces_w_one(r.description)}', file=bff)


def main():
    try_unlink(MEMMAP_FILE)
    try_unlink(BITFIELDS_FILE)
    wanted_periphs, wanted_regs = wanted()

    parser = SVDParser.for_xml_file(SVD_FILE, remove_reserved=True)
    dev = parser.get_device()
    periphs = dev.peripherals

    with open(MEMMAP_FILE, 'a') as mmf, open(BITFIELDS_FILE, 'a') as bff:
        for p in periphs:
            if p.name not in wanted_periphs:
                continue
            print_periph(p, mmf, bff, wanted_regs)


if __name__ == '__main__':
    main()
